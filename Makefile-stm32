PREFIX 	= arm-none-eabi-
CC 	= $(PREFIX)gcc
CPP	= $(PREFIX)g++
AS 	= $(PREFIX)gcc
AR 	= $(PREFIX)ar
LINK 	= $(PREFIX)gcc
SIZE 	= $(PREFIX)size
OBJDUMP = $(PREFIX)objdump
OBJCPY 	= $(PREFIX)objcopy

LIBS    = stm32
DEVICE 	=  -mcpu=cortex-m3 -mthumb -ffunction-sections -fdata-sections
CFLAGS 	= $(DEVICE) $(patsubst %, -I"%", $(CPATH)) -DSTM32F10X_MD
CXXFLAGS= $(CFLAGS)
AFLAGS 	= $(DEVICE)  -c -x assembler-with-cpp
LFLAGS 	= $(DEVICE)  -Wl,-Map=$(TARGET).map,-cref,-u,Reset_Handler \
	  -T "/home/zj/Templates/stm32f103c8t6.ld" -nostartfiles $(patsubst %, -l%, $(LIBS)) \
	  $(patsubst %, -L"%", $(LPATH))

CPATH 	= $(patsubst %, /home/zj/stm32f10x/include/%, stm32f10x tft)
LPATH 	= /home/zj/stm32f10x/lib
################################################################
BUILD   = debug
#BUILD   = release
#BUILD_LIB = yes
BUILD_LIB = no
################################################################

ifeq '$(BUILD)'  'debug'
	CFLAGS +=  -O0 -gdwarf-2
	AFLAGS +=  -gdwarf-2
else
	CFLAGS +=  -O2
endif

ROOT_DIR = $(shell pwd)
SUB_DIR = ${shell ls -l "${ROOT_DIR}" | grep ^d | awk '{if($$9 != "build") print $$9 }'}
################################################################
BUILD_DIR = $(ROOT_DIR)/build/$(BUILD)
BUILD_LIB_DIR =$(LPATH)
################################################################
TARGET = stm32
export CC CPP AS AR LINK SIZE OBJDUMP OBJCPY DEVICE CFLAGS CXXFLAGS ASFLAGS LFLAGS ROOT_DIR \
       	BUILD BUILD_DIR BUILD_LIB_DIR

SRC_FILE = ${wildcard *.c}
SRC_FILE += ${wildcard *.cpp}
SRC_FILE += ${wildcard *.s}
#SRC_FILE = ${shell ls *.c}
#OBJ_FILE = ${SRC_FILE:.c=.o}
TMP = ${patsubst %.c, %.o, ${SRC_FILE}}
TMP += ${patsubst %.cpp, %.o, ${SRC_FILE}}
TMP += ${patsubst %.s, %.o, ${SRC_FILE}}
OBJ_FILE = $(filter %.o, $(TMP))


# Attempt to create a output directory.
$(shell [ -d "${BUILD_DIR}" ]  || mkdir -p "${BUILD_DIR}")
# Verify if it was successful.
BUILD_DIR := $(shell cd "$(BUILD_DIR)" && /bin/pwd)
$(if "$(BUILD_DIR)",,$(error output directory "$(saved-output)" does not exist))

all: $(TARGET)


$(SUB_DIR):ECHO
	-make -C "${ROOT_DIR}/$@"

%.o:%.cpp
	${CPP} ${CXXFLAGS} -c "$^" -o "${BUILD_DIR}/$@"

%.o:%.c
	${CC} ${CFLAGS}    -c "$^" -o "${BUILD_DIR}/$@"

%.o:%.s
	${AS} ${ASFLAGS}   -c "$^" -o "${BUILD_DIR}/$@"

ifneq "$(BUILD_LIB)" "yes"

$(TARGET): $(SUB_DIR) $(OBJ_FILE)
	cd "${BUILD_DIR}"  && ${CC}  $(filter %.o, $(shell  ls "$(BUILD_DIR)")) ${LFLAGS} -o "$(ROOT_DIR)/$(TARGET)" 
	${OBJCPY} -I elf32-littlearm -O ihex $(TARGET) $(TARGET).hex
	${OBJCPY} -I elf32-littlearm -O binary $(TARGET) $(TARGET).bin
	${SIZE}  -d "$(TARGET)"
	
else

$(TARGET): $(SUB_DIR) $(OBJ_FILE)
	cd "${BUILD_DIR}"  && ${AR} -rc "$(BUILD_LIB_DIR)/lib${TARGET}.a" $(filter %.o, $(shell  ls "$(BUILD_DIR)"))

endif

ECHO:
	@echo ${SUB_DIR}

flash:
	stm32flash -w stm32.hex /dev/ttyUSB0


DEBUG_INTERFACE = jlink
#DEBUG_INTERFACE = stlink-v2
#DEBUG_INTERFACE = ftdi/openjtag
DEBUG_TARGET = stm32f1x
RUN_OPENOCD = setsid 	openocd
RUN_OPENOCD += -f /usr/share/openocd/scripts/interface/$(DEBUG_INTERFACE).cfg
RUN_OPENOCD += -c "transport select swd" 
RUN_OPENOCD += -f /usr/share/openocd/scripts/target/$(DEBUG_TARGET).cfg 
RUN_OPENOCD += > /dev/null 2>&1 &
	

GDB_RUN = -ex "tar ext 127.0.0.1:3333" 
GDB_RUN += -ex "b main" 
GDB_RUN += -ex "lay n" 
GDB_RUN += -ex "lay n" 
GDB_RUN += -ex "lay n" 
GDB_RUN += -ex "monitor reset halt" -ex c

GDB_PROG = -ex "tar ext 127.0.0.1:3333" 
GDB_PROG += -ex "load"
#GDB_PROG +=-ex "monitor  stm32f1x mass_erase 0 " 
GDB_PROG += -ex "monitor reset"


run:	
	${RUN_OPENOCD}
#	(sleep 1 && echo -e "halt" && sleep 1) | telnet 127.0.0.1 4444
	arm-none-eabi-gdb ${TARGET} ${GDB_RUN}
	#arm-none-eabi-gdb ${TARGET} -ex "tar ext 127.0.0.1:3333" -ex "b main" -ex "lay n" -ex "lay n" -ex "lay n"
	#pid=`ps -C openocd -o pid --noheader` && kill -9 $$pid
	killall openocd

programe:
	${RUN_OPENOCD}
	#(echo -e "reset halt" && sleep 1 && echo "flash write_image erase ${TARGET}.bin 0x8000000"  && sleep 3) | telnet 127.0.0.1 4444
	arm-none-eabi-gdb ${TARGET} ${GDB_PROG}
	#pid=`ps -C openocd -o pid --noheader` && kill -9 $$pid
	killall openocd

clean:
	scons -c

.PHONY: all
